INTERLIS 2.4;

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!
!! DM.flex Datenmodell der amtlichen Vermessung "Bund" (DM.flex-AV-CH)
!! beschrieben in INTERLIS Version 2.4
!!
!! Bundesamt fuer Landestopographie (swisstopo)
!! Fachstelle Eidgenoessische Vermessungsdirektion (V+D)
!! CH-3084 Wabern
!! www.cadastre.ch und www.interlis.ch
!!
!! Version: 1 deutsch
!! Dateiname: DM.flex-AV-CH.ili
!!
!! Das vorliegende Datenmodell gilt fuer den Bezugsrahmen "Landesvermessung 1903+
!! (LV95)".
!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!@ technicalContact = mailto:vermessung@swisstopo.ch
!!@ furtherInformation = https://www.cadastre.ch/de/manual-av/method/dm-flex.html
!!@ IDGeoIV = "63.1"
MODEL DM_Flex_AV_CH_HoheitsgrenzenAV_V1_0 (de)
  AT "https://models.geo.admin.ch/V_D/" VERSION "2021-09-06" =
  IMPORTS GeometryCHLV95_V2;
  IMPORTS CHAdminCodes_V2;
  IMPORTS DM_Flex_AV_CH_Topologie_V1_0;
  IMPORTS DM_Flex_AV_CH_Modinfo_V1_0;
  IMPORTS DM_Flex_AV_CH_Vermarkung_V1_0;
  IMPORTS DM_Flex_AV_CH_Qualitaet_V1_0;
  IMPORTS DM_Flex_AV_CH_Grafik_V1_0;
  
  TOPIC HoheitsgrenzenAV =
    BASKET OID AS INTERLIS.UUIDOID;
    OID AS INTERLIS.UUIDOID;

    CLASS GemGNachfuehrung =
      NBIdent: MANDATORY TEXT*12;
      Identifikator: MANDATORY TEXT*12;  !! z.B. Nummer des technischen Dossiers
      Beschreibung: MANDATORY TEXT*30;
      Perimeter:  SURFACE WITH (STRAIGHTS, ARCS) VERTEX GeometryCHLV95_V2.Coord2
        WITHOUT OVERLAPS > 0.002;
      Status: MANDATORY DM_Flex_AV_CH_Modinfo_V1_0.Status;
      GueltigerEintrag: INTERLIS.XMLDateTime;      
      GenehmigtAm: INTERLIS.XMLDateTime;      
    UNIQUE NBIdent, Identifikator;
    END GemGNachfuehrung;

    CLASS BezGNachfuehrung =
      NBIdent: MANDATORY TEXT*12;
      Identifikator: MANDATORY TEXT*12;
      Beschreibung: MANDATORY TEXT*30;
      Perimeter:  SURFACE WITH (STRAIGHTS, ARCS) VERTEX GeometryCHLV95_V2.Coord2
        WITHOUT OVERLAPS > 0.002;
      Status: MANDATORY DM_Flex_AV_CH_Modinfo_V1_0.Status;
      GueltigerEintrag: INTERLIS.XMLDateTime;      
      GenehmigtAm: INTERLIS.XMLDateTime;      
    UNIQUE NBIdent, Identifikator;
    END BezGNachfuehrung;

    CLASS KanGNachfuehrung =
      NBIdent: MANDATORY TEXT*12;
      Identifikator: MANDATORY TEXT*12;
      Beschreibung: MANDATORY TEXT*30;
      Perimeter:  SURFACE WITH (STRAIGHTS, ARCS) VERTEX GeometryCHLV95_V2.Coord2
        WITHOUT OVERLAPS > 0.002;
      Status: MANDATORY DM_Flex_AV_CH_Modinfo_V1_0.Status;
      GueltigerEintrag: INTERLIS.XMLDateTime;      
      GenehmigtAm: INTERLIS.XMLDateTime;      
    UNIQUE NBIdent, Identifikator;
    END KanGNachfuehrung;
    
    CLASS Gemeinde =
      Name: MANDATORY TEXT*30;
      BFSNummer: MANDATORY CHAdminCodes_V2.CHMunicipalityCode;
      Fiktiv : MANDATORY BOOLEAN;
    END Gemeinde;

    ASSOCIATION Entstehung_Gemeinde =
        Entstehung -- {1} GemGNachfuehrung;
        entstehende_Gemeinde -- {0..*} Gemeinde;
    END Entstehung_Gemeinde;

    ASSOCIATION Untergang_Gemeinde =
        Untergang -- {0..1} GemGNachfuehrung;
        untergehende_Gemeinde -- {0..*} Gemeinde;
    END Untergang_Gemeinde;

    ASSOCIATION Vorgaenger_Nachfolger_Gemeinde =
        Vorgaenger -- {0..1} Gemeinde;
        Nachfolger -- {0..*} Gemeinde;
    END Vorgaenger_Nachfolger_Gemeinde;
    
    VIEW Gemeinde_Gueltig
     	PROJECTION OF Gemeinde;
    	WHERE DEFINED(Gemeinde->Entstehung) AND Gemeinde->Entstehung->Status==#gueltig AND (NOT(DEFINED(Gemeinde->Untergang)) OR Gemeinde->Untergang->Status<>#gueltig);
    	=
    	ALL OF Gemeinde;
    UNIQUE BFSNummer;
    END Gemeinde_Gueltig;
    
    CLASS Gemeindegrenze =  !! auch als Exklave moeglich
      Geometrie: MANDATORY SURFACE WITH (STRAIGHTS, ARCS) VERTEX GeometryCHLV95_V2.Coord2
        WITHOUT OVERLAPS > 0.002;
      Fiktiv : MANDATORY BOOLEAN;
      Streitig: GeometryCHLV95_V2.MultiLine;
      !! Verlauf einer streitigen Grenze muss auf derselben Geometrie liegen
      MANDATORY CONSTRAINT NOT(DEFINED(Streitig)) OR DM_Flex_AV_CH_Topologie_V1_0.overlay(>Gemeindegrenze,"Geometrie",THIS,"Streitig->Lines->Line");
    END Gemeindegrenze;

    ASSOCIATION Entstehung_Gemeindegrenze =
        Entstehung -- {1} GemGNachfuehrung;
        entstehende_Gemeindegrenze -- {0..*} Gemeindegrenze;
    END Entstehung_Gemeindegrenze;

    ASSOCIATION Untergang_Gemeindegrenze =
        Untergang -- {0..1} GemGNachfuehrung;
        untergehende_Gemeindegrenze -- {0..*} Gemeindegrenze;
    END Untergang_Gemeindegrenze;

    ASSOCIATION Vorgaenger_Nachfolger_Gemeindegrenze =
        Vorgaenger -- {0..1} Gemeindegrenze;
        Nachfolger -- {0..*} Gemeindegrenze;
    END Vorgaenger_Nachfolger_Gemeindegrenze;
    
    VIEW Gemeindegrenze_Gueltig
     	PROJECTION OF Gemeindegrenze;
    	WHERE DEFINED(Gemeindegrenze->Entstehung) AND Gemeindegrenze->Entstehung->Status==#gueltig AND (NOT(DEFINED(Gemeindegrenze->Untergang)) OR Gemeindegrenze->Untergang->Status<>#gueltig);
    	=
    	ALL OF Gemeindegrenze;
    SET CONSTRAINT INTERLIS.areAreas(ALL, UNDEFINED, >> Geometrie);
    END Gemeindegrenze_Gueltig;

    ASSOCIATION GemeindeGemeindegrenze =
      Gemeinde -- {1} Gemeinde;
      Gemeindegrenze -- {1..*} Gemeindegrenze;
    END GemeindeGemeindegrenze;
    
    CLASS ProjGemeindegrenzabschnitt =  !! auch als Exklave moeglich
      Geometrie: MANDATORY GeometryCHLV95_V2.Line;
    END ProjGemeindegrenzabschnitt;

   ASSOCIATION Entstehung_ProjGemeindegrenzabschnitt =
        Entstehung -- {1} GemGNachfuehrung;
        entstehender_ProjGemeindegrenzabschnitt -- {0..*} ProjGemeindegrenzabschnitt;
    END Entstehung_ProjGemeindegrenzabschnitt;

   ASSOCIATION Untergang_ProjGemeindegrenzabschnitt =
        Untergang -- {0..1} GemGNachfuehrung;
        untergehender_ProjGemeindegrenzabschnitt -- {0..*} ProjGemeindegrenzabschnitt;
    END Untergang_ProjGemeindegrenzabschnitt;
    
    ASSOCIATION GemeindeProjGemeindegrenzabschnitt =
      Gemeinde -- {1} Gemeinde;
      ProjGemeindeGrenzabschnitt -- {1..*} ProjGemeindegrenzabschnitt;
    END GemeindeProjGemeindegrenzabschnitt;

    ASSOCIATION Vorgaenger_Nachfolger_ProjGemeindegrenzabschnitt =
        Vorgaenger -- {0..1} ProjGemeindegrenzabschnitt;
        Nachfolger -- {0..*} ProjGemeindegrenzabschnitt;
    END Vorgaenger_Nachfolger_ProjGemeindegrenzabschnitt;
    
    VIEW Gemeindegrenzabschnitt_Projektiert
     	PROJECTION OF ProjGemeindegrenzabschnitt;
    	WHERE DEFINED(ProjGemeindegrenzabschnitt->Entstehung) AND ProjGemeindegrenzabschnitt->Entstehung->Status==#projektiert  AND (NOT(DEFINED(ProjGemeindegrenzabschnitt->Untergang)) OR ProjGemeindegrenzabschnitt->Untergang->Status<>#gueltig);
    	=
    	ALL OF ProjGemeindegrenzabschnitt;
    END Gemeindegrenzabschnitt_Projektiert;
    
    CLASS Bezirksgrenzabschnitt =
      Geometrie: MANDATORY GeometryCHLV95_V2.Line;
        !! // Geometrie nur Hoheitsgrenzpunkt //
      Gueltigkeit: MANDATORY (
        rechtskraeftig, !! exakte Grenze aus Amtl. Vermessung
        streitig,       !! streitige Grenze
        provisorisch,   !! definierte Grenze, aber qualitativ ungenuegend
        undefiniert);   !! z.B. unbekannter Seeabschluss
    END Bezirksgrenzabschnitt;
    
    ASSOCIATION Entstehung_Bezirksgrenzabschnitt =
        Entstehung -- {1} BezGNachfuehrung;
        entstehender_Bezirksgrenzabschnitt -- {0..*} Bezirksgrenzabschnitt;
    END Entstehung_Bezirksgrenzabschnitt;

    ASSOCIATION Untergang_Bezirksgrenzabschnitt =
        Untergang -- {0..1} BezGNachfuehrung;
        untergehender_Bezirksgrenzabschnitt -- {0..*} Bezirksgrenzabschnitt;
    END Untergang_Bezirksgrenzabschnitt;

    ASSOCIATION Vorgaenger_Nachfolger_Bezirksgrenzabschnitt =
        Vorgaenger -- {0..1} Bezirksgrenzabschnitt;
        Nachfolger -- {0..*} Bezirksgrenzabschnitt;
    END Vorgaenger_Nachfolger_Bezirksgrenzabschnitt;
    
    VIEW Bezirksgrenzabschnitt_Gueltig
     	PROJECTION OF Bezirksgrenzabschnitt;
    	WHERE DEFINED(Bezirksgrenzabschnitt->Entstehung) AND Bezirksgrenzabschnitt->Entstehung->Status==#gueltig AND (NOT(DEFINED(Bezirksgrenzabschnitt->Untergang)) OR Bezirksgrenzabschnitt->Untergang->Status<>#gueltig);
    	=
    	ALL OF Bezirksgrenzabschnitt;
    END Bezirksgrenzabschnitt_Gueltig;

    CLASS Kantonsgrenzabschnitt =
      Geometrie: MANDATORY GeometryCHLV95_V2.Line;
        !! // Geometrie nur Hoheitsgrenzpunkt //
      Gueltigkeit: MANDATORY (
        rechtskraeftig, !! exakte Grenze aus Amtl. Vermessung
        streitig,       !! streitige Grenze
        provisorisch,   !! definierte Grenze, aber qualitativ ungenuegend
        undefiniert);   !! z.B. unbekannter Seeabschluss
    END Kantonsgrenzabschnitt;

    ASSOCIATION Entstehung_Kantonsgrenzabschnitt =
        Entstehung -- {1} KanGNachfuehrung;
        entstehender_Kantonsgrenzabschnitt -- {0..*} Kantonsgrenzabschnitt;
    END Entstehung_Kantonsgrenzabschnitt;

    ASSOCIATION Untergang_Kantonsgrenzabschnitt =
        Untergang -- {0..1} KanGNachfuehrung;
        untergehender_Kantonsgrenzabschnitt -- {0..*} Kantonsgrenzabschnitt;
    END Untergang_Kantonsgrenzabschnitt;

    ASSOCIATION Vorgaenger_Nachfolger_Kantonsgrenzabschnitt =
        Vorgaenger -- {0..1} Kantonsgrenzabschnitt;
        Nachfolger -- {0..*} Kantonsgrenzabschnitt;
    END Vorgaenger_Nachfolger_Kantonsgrenzabschnitt;
    
    VIEW Kantonsgrenzabschnitt_Gueltig
     	PROJECTION OF Kantonsgrenzabschnitt;
    	WHERE DEFINED(Kantonsgrenzabschnitt->Entstehung) AND Kantonsgrenzabschnitt->Entstehung->Status==#gueltig AND (NOT(DEFINED(Kantonsgrenzabschnitt->Untergang)) OR Kantonsgrenzabschnitt->Untergang->Status<>#gueltig);
    	=
    	ALL OF Kantonsgrenzabschnitt;
    END Kantonsgrenzabschnitt_Gueltig;
    
  END HoheitsgrenzenAV;
 
END DM_Flex_AV_CH_HoheitsgrenzenAV_V1_0.
